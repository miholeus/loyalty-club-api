<?php

namespace Zenomania\CoreBundle\Repository;

use Symfony\Component\HttpKernel\Exception\HttpException;
use Zenomania\ApiBundle\Request\Filter\BadgeFilter;
use Zenomania\CoreBundle\Entity\Badge;
use Zenomania\CoreBundle\Entity\BadgeType;
use Zenomania\ApiBundle\Service\Utils\PeriodConverter;
use Zenomania\CoreBundle\Entity\UserBadge;

/**
 * UserBadgeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserBadgeRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param UserBadge $userBadge
     */
    public function save(UserBadge $userBadge)
    {
        $this->_em->persist($userBadge);
        $this->_em->flush();
    }

    /**
     * @param UserBadge $userBadge
     */
    public function remove(UserBadge $userBadge)
    {
        $this->_em->remove($userBadge);
        $this->_em->flush();
    }

    public function getBadgesByFilter(BadgeFilter $filter)
    {
        $em = $this->getEntityManager();
        $subQuery = $em->getConnection()->createQueryBuilder()
            ->select([
                'SUM (ub.points) AS points',
                'user_id',
                'code',
            ])->from('user_badge', 'ub')
            ->innerJoin('ub', 'badge', 'b', 'ub.badge_id = b.id')
            ->where('ub.user_id = :user_id')
            ->groupBy(['user_id', 'code']);
        if ($filter->period) {
            $subQuery
                ->andWhere('dt > :dt');
        }

        $qb = clone $em->getConnection()->createQueryBuilder();
        $select = $qb->select([
            'bt.id AS type_id',
            'bt.title AS type_title',
            'b.title AS badge_title',
            'b.code AS badge_code',
            'ub.points',
            'b.max_points',
            'b.photo',
            'b.photo_badge',
            'bt.sort AS type_sort',
            'b.sort AS badge_sort',
        ])->from('badge', 'b')
            ->innerJoin('b', 'badge_type', 'bt', 'bt.id = b.type_id')
            ->leftJoin('b', sprintf("(%s)", $subQuery), 'ub', 'b.code = ub.code')
            ->where('b.active = true')
            ->orderBy('b.sort')
            ->orderBy('bt.sort')
            ->setParameter('user_id', $filter->user->getId());

        if ($filter->period) {
            $select
                ->setParameter('dt', $filter->period);
        }
        $result = $select->execute()->fetchAll();
        return $result;
    }

    /**
     * @param array $period
     * @return mixed
     */
    public function getTopUser(array $period, $count = 1)
    {
        $em = $this->getEntityManager();

        $qb = $em->getConnection()->createQueryBuilder();

        $select = $qb->select(['sum(p.points) as sum_points', 'p.user_id'])
            ->from('person_points', 'p')
            ->where('p.dt BETWEEN :dt_st AND :dt_ed')
            ->setParameter('dt_st', $period['st']->format('Y-m-d'))
            ->setParameter('dt_ed', $period['ed']->format('Y-m-d'))
            ->groupBy('p.user_id')
            ->orderBy('sum_points', 'DESC')
            ->setMaxResults($count)
            ->execute();
        $result = $select->fetch();
        if ($result != null) {
            $user = $em->getRepository('ZenomaniaCoreBundle:User')->find($result['user_id']);
            if ($user) {
                return $user;
            } else {
                throw new HttpException('404', 'Пользователь не найден');
            }
        } else {
            throw new HttpException('404', 'Ни у одного пользователя, нету поинтов');
        }
    }

    protected function getCountEventsOfPeriod(array $period)
    {
        $em = $this->getEntityManager();

        $qb = $em->getConnection()->createQueryBuilder();

        $query = $qb->select(['*'])
            ->from('event', 'e')
            ->where('e.date BETWEEN :dt_st AND :dt_ed')
            ->setParameter('dt_st', $period['st']->format('Y-m-d'))
            ->setParameter('dt_ed', $period['ed']->format('Y-m-d'));
        $count = $query->execute()->rowCount();
        return $count;
    }

    /**
     * @param array $period
     * @param string $badgeCode
     * @return array
     */
    public function getUsersOfAllAttendanceOfPeriod(array $period, string $badgeCode)
    {
        $this->getCountEventsOfPeriod($period);
        $em = $this->getEntityManager();

        $badge = $em->getRepository('ZenomaniaCoreBundle:Badge')->findOneBy(['code' => Badge::TYPE_ATTENDANCE]);
        $badgeOfPeriod = $em->getRepository('ZenomaniaCoreBundle:Badge')
            ->findBadge($badgeCode, $period);

        $count = $this->getCountEventsOfPeriod($period);

        $qb = $em->getConnection()->createQueryBuilder();

        $select = $qb->select(['ub.user_id'])
            ->from('user_badge', 'ub')
            ->where('ub.dt BETWEEN :dt_st AND :dt_ed')
            ->andWhere('ub.user_id NOT IN (
            SELECT user_id
            FROM user_badge
            WHERE badge_id = :badge_of_month
            GROUP BY user_id
            )')
            ->andWhere('ub.badge_id = :badge_id')
            ->groupBy('ub.user_id')
            ->having('count(ub.id) = :count')
            ->setParameter('dt_st', $period['st']->format('Y-m-d'))
            ->setParameter('dt_ed', $period['ed']->format('Y-m-d'))
            ->setParameter('badge_id', $badge->getId())
            ->setParameter('badge_of_month', $badgeOfPeriod->getId())
            ->setParameter('count', $count)
            ->execute();
        $items = $select->fetchAll();
        $data = array();
        if ($items != null) {
            foreach ($items as $item) {
                $user = $em->getRepository('ZenomaniaCoreBundle:User')->find($item['user_id']);
                if ($user) {
                    $data[] = $user;
                }
            }
            return $data;
        } else {
            throw new HttpException('404', 'Ни один пользователь, не посетил все матчи');
        }
    }
}
