<?php

namespace Zenomania\CoreBundle\Repository;

use Symfony\Component\HttpKernel\Exception\HttpException;
use Zenomania\ApiBundle\Service\Exception;
use Zenomania\CoreBundle\Entity\DeliveryType;
use Zenomania\CoreBundle\Entity\Order;
use Zenomania\CoreBundle\Entity\OrderDelivery;
use Zenomania\CoreBundle\Entity\User;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends \Doctrine\ORM\EntityRepository
{

    public function getOrderData(Order $order)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $qbOrderStatusHistory = clone $qb;

        $selectOrderStatusHistory = $qbOrderStatusHistory->select('s')
            ->from('ZenomaniaCoreBundle:OrderStatusHistory', 's')
            ->where('s.orderId = :order_id')
            ->orderBy('s.createdAt')
            ->setParameter('order_id', $order->getId());
        $resultOrderStatusHistory = $selectOrderStatusHistory->getQuery()->getResult();

        $qbOrderCart = clone $qb;

        $selectOrderCart = $qbOrderCart->select('c')
            ->from('ZenomaniaCoreBundle:OrderCart', 'c')
            ->where('c.orderId = :order_id')
            ->setParameter('order_id', $order->getId());
        $resultOrderCart = $selectOrderCart->getQuery()->getResult();

        $qbOrderDelivery = clone $qb;

        $selectOrderDelivery = $qbOrderDelivery->select('d')
            ->from('ZenomaniaCoreBundle:OrderDelivery', 'd')
            ->where('d.orderId = :order_id')
            ->setParameter('order_id', $order->getId());
        $resultOrderDelivery = $selectOrderDelivery->getQuery()->getOneOrNullResult();

        $result = [
            'orderStatusHistory' => $resultOrderStatusHistory,
            'orderCart' => $resultOrderCart,
            'orderDelivery' => $resultOrderDelivery,
        ];
        return $result;
    }

    public function findAll()
    {
        return $this->findBy(array(), array('id' => 'ASC'));
    }

    /**
     * @param Order $order
     * @param array $orderCarts
     * @param OrderDelivery $orderDelivery
     * @param int $deliveryTypeId
     * @return bool|Order
     */
    public function createOrder(Order $order, array $orderCarts, OrderDelivery $orderDelivery, int $deliveryTypeId)
    {
        $em = $this->getEntityManager();
        try {
            $em->beginTransaction();
            $em->persist($order);
            $em->flush();

            $em->getRepository('ZenomaniaCoreBundle:OrderCart')->createOrderCarts($orderCarts, $order);
            /** @var DeliveryType $deliveryType */
            $deliveryType = $em->find('ZenomaniaCoreBundle:DeliveryType', $deliveryTypeId);
            if ($deliveryType == null) {
                throw new HttpException(404, 'Не найден способ доставки');
            }
            $orderDelivery->setDeliveryTypeId($deliveryType);
            $orderDelivery->setOrderId($order);

            $em->persist($orderDelivery);

            $em->flush();
            $em->commit();
        } catch (Exception $e) {
            $em->rollback();
            return false;
        }
        return $order;
    }

    public function getPrizes(User $user)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $query = $qb->select(['p.title', 'p.photo', 't.barcode as attachment'])
            ->from('ZenomaniaCoreBundle:Order', 'o')
            ->innerJoin('ZenomaniaCoreBundle:OrderCart', 'c', 'WITH', 'o.id = c.orderId')
            ->innerJoin('ZenomaniaCoreBundle:Product', 'p', 'WITH', 'c.productId = p.id')
            ->leftJoin('ZenomaniaCoreBundle:TicketForZen', 't', 'WITH', 't.order = o.id')
            ->where('o.userId = :userId')
            ->setParameter('userId', $user->getId())
            ->orderBy('o.createdAt', 'desc')
            ->getQuery();
        $result = $query->getArrayResult();
        return $result;
    }
}