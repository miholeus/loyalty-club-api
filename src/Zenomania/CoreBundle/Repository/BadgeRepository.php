<?php

namespace Zenomania\CoreBundle\Repository;

use Symfony\Component\HttpKernel\Exception\HttpException;
use Zenomania\ApiBundle\Service\Utils\PeriodConverter;
use Zenomania\CoreBundle\Entity\Badge;

/**
 * BadgeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BadgeRepository extends \Doctrine\ORM\EntityRepository
{


    /**
     * @param string $code
     * @param array|null $period
     * @return mixed
     */
    public function findBadge(string $code, array $period = null)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $select = $qb->select('b')
            ->from('ZenomaniaCoreBundle:Badge', 'b')
            ->where('b.code = :code')
            ->setParameter('code', $code);
        if ($period) {
            $select->andWhere('b.date BETWEEN :dt_st AND :dt_ed')
                ->setParameter('dt_st', $period['st']->format('Y-m-d'))
                ->setParameter('dt_ed', $period['ed']->format('Y-m-d'));
        }
        $result = $select->getQuery()->getOneOrNullResult();
        if ($result == null) {
            throw new HttpException('404', 'Бейдж не найден');
        }
        return $result;
    }

    public function getUsersNeedBadgeRegistrations()
    {
        $em = $this->getEntityManager();
        $qb = $em->getConnection()->createQueryBuilder();
        /** @var Badge $badge */
        $badge = $this->getEntityManager()->getRepository('ZenomaniaCoreBundle:Badge')->findOneBy(['code' => Badge::TYPE_REGISTRATION]);
        if ($badge) {
            $subQuery = clone $qb;
            $subQuery->select('*')
                ->from('user_badge', 'b')
                ->where('b.badge_id = :badge_id');

            $query = $qb->select('u.id')
                ->from('users', 'u')
                ->leftJoin('u', sprintf("(%s)", $subQuery), 'ub', 'u.id = ub.user_id')
                ->andWhere('ub.user_id IS NULL')
                ->setParameter('badge_id', $badge->getId())
                ->execute();
            $result = $query->fetchAll();
            return $result;
        }
        return null;
    }

}
